#version 330 core
out vec4 FragColor;

in vec3 normalPos;
in vec3 fragViewPos;

// Material Properties
uniform vec3 Ka;
uniform vec3 Kd;
uniform vec3 Ks;
uniform float Ns;

// Light properties
uniform vec3 lightColor;
in vec3 lightViewPos;

// all of this is done in view space 

float ambientStr = 0.15f;

void main()
{    

    // blinn phong shading

    // Ambient
    vec3 ambient = ambientStr * Ka;

    // diffuse light 
    vec3 normalizedNormal = normalize(normalPos);
    vec3 lightDir = normalize(lightViewPos - fragViewPos);
    float diff = max(dot(normalizedNormal, lightDir), 0.0);
    vec3 diffuse = diff * Kd;

    // specular light (blinn-phong)
    vec3 viewDir = normalize(-fragViewPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normalizedNormal, halfwayDir), 0.0), Ns);
    vec3 specular = spec * Ks;


    vec3 finalColor = (ambient + diffuse + specular) * lightColor; 
    FragColor = vec4(finalColor,1);
}