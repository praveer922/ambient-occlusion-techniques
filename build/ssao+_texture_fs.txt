#version 330 core
out float OcclusionValue;

in vec2 TexCoords;

uniform sampler2D viewSpacePos;
uniform sampler2D gNormal;
uniform mat4 projection;
uniform vec3 samples[64];

float bias = 0.05;
uniform float radius;

void main()
{             
    vec3 fragPos = texture(viewSpacePos, TexCoords).xyz;
    vec3 normal = normalize(texture(gNormal, TexCoords).xyz);

    vec3 tangent;
    if (abs(normal.x) < 0.9) {
        tangent = normalize(cross(normal, vec3(1.0, 0.0, 0.0)));
    } else {
        tangent = normalize(cross(normal, vec3(0.0, 1.0, 0.0)));
    }
    vec3 bitangent = cross(normal, tangent);

    // create TBN change-of-basis matrix: from tangent-space to view-space
    mat3 TBN = mat3(tangent, bitangent, normal);


    float occlusion = 0.0;
    for (int i=0;i<64;i++) {
        vec3 rotated_sample = TBN * samples[i];
        vec3 samplePos = fragPos + rotated_sample;

        // project sample view space position to screen position
        vec4 offset = vec4(samplePos, 1.0);
        offset = projection * offset;
        offset.xyz /= offset.w;
        offset.xyz = offset.xyz * 0.5 + 0.5;

        float sampleDepth = texture(viewSpacePos, offset.xy).z;

        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));
        occlusion += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * rangeCheck; 

    }

    OcclusionValue = 1.0 - (occlusion / 64);
}